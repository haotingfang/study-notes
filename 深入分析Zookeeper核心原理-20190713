一、zab协议
参考资料
https://www.huaweicloud.com/articles/8a1bd178d024415b4497d39ba8495cb1.html

二、zookeeper是如何保证请求的顺序一致性
zookeeper不保证在每个实例中，两个不同的客户端具有相同的zookeeper数据视图，由于网络延迟等因素，一个客户端可能会在另外一个客户端收到更改通知之前执行更新，考虑到2个客户端A和B的场景，如果A把znode/a的值从0设置为1，然后告诉客户端B读取/a，则客户端B可能会读取到旧的值0，具体取决于他连接到那个服务器，如果客户端A和B要读取必须要读取到相同的值，那么clientB在读取操作之前执行sync方法。
除此之外，zookeeper基于zxid以及阻塞队列的方式来实现请求的顺序一致性。如果一个client连接到一个最新的follower上，那么它read读取到了最新的数据，然后client由于网络原因重新连接到zookeeper节点，而这个时候连接到一个还没有完成数据同步的follower节点，那么这一次读到的数据不久是旧的数据吗？实际上zookeeper处理了这种情况，client会记录自己已经读取到的最大的zxid，如果client重连到server发现client的zxid比自己大。连接会失败


三、Zookeeper leader选举的原理
接下来再我们基于源码来分析leader选举的整个实现过程。leader选举存在与两个阶段中，一个是服务器启动时的leader选举。另一个是运行过程中leader节点宕机导致的leader选举；

在开始分析选举的原理之前，先了解几个重要的参数
服务器ID（myid）比如有三台服务器，编号分别是1,2,3。编号越大在选择算法中的权重越大。
zxid事务id值越大说明数据越新，在选举算法中的权重也越大
逻辑时钟（epoch–logicalclock）或者叫投票的次数，同一轮投票过程中的逻辑时钟值是相同的。每投完一次票这个数据就会增加，然后与接收到的其它服务器返回的投票信息中的数值相比，根据不同的值做出不同的判断。

选举状态
LOOKING，竞选状态。
FOLLOWING，随从状态，同步leader状态，参与投票。
OBSERVING，观察状态,同步leader状态，不参与投票。
LEADING，领导者状态。

服务器启动时的leader选举
每个节点启动的时候状态都是LOOKING，处于观望状态，接下来就开始进行选主流程。
若进行Leader选举，则至少需要两台机器，这里选取3台机器组成的服务器集群为例。在集群初始化阶段，当有一台服务器Server1启动时，其单独无法进行和完成Leader选举，当第二台服务器Server2启动时，此时两台机器可以相互通信，每台机器都试图找到Leader，于是进入Leader选举过程。选举过程如下
(1)每个Server发出一个投票。由于是初始情况，Server1和Server2都会将自己作为Leader服务器来进行投票，每次投票会包含所推举的服务器的myid和ZXID、epoch，使用(myid, ZXID,epoch)来表示，此时Server1的投票为(1, 0)，Server2的投票为(2, 0)，然后各自将这个投票发给集群中其他机器。

(2)接受来自各个服务器的投票。集群的每个服务器收到投票后，首先判断该投票的有效性，如检查是否是本轮投票（epoch）、是否来自LOOKING状态的服务器。

(3)处理投票。针对每一个投票，服务器都需要将别人的投票和自己的投票进行PK，
PK规则如下
i.优先比较epoch
ii.其次检查ZXID。ZXID比较大的服务器优先作为Leader
iii.如果ZXID相同，那么就比较myid。myid较大的服务器作为Leader服务器。
对于Server1而言，它的投票是(1, 0)，接收Server2的投票为(2, 0)，首先会比较两者的ZXID，均为0，再比较myid，此时Server2的myid最大，于是更新自己的投票为(2,0)，然后重新投票，对于Server2而言，其无须更新自己的投票，只是再次向集群中所有机器发出上一次投票信息即可。

(4)统计投票。每次投票后，服务器都会统计投票信息，判断是否已经有过半机器接受到相同的投票信息，对于Server1、Server2而言，都统计出集群中已经有两台机器接受了(2, 0)的投票信息，此时便认为已经选出了Leader。

(5)改变服务器状态。一旦确定了Leader，每个服务器就会更新自己的状态，如果是Follower，那么就变更为FOLLOWING，如果是Leader，就变更为LEADING。

运行过程中的leader选举
当集群中的leader服务器出现宕机或者不可用的情况时，那么整个集群将无法对外提供服务，而是进入新一轮的Leader选举，服务器运行期间的Leader选举和启动时期的Leader选举基本过程是一致的。

(1)变更状态。Leader挂后，余下的非Observer服务器都会将自己的服务器状态变更为LOOKING，然后开始进入Leader选举过程。
(2)每个Server会发出一个投票。在运行期间，每个服务器上的ZXID可能不同，此时假定Server1的ZXID为123，Server3的ZXID为122；在第一轮投票中，Server1和Server3都会投自己，产生投票(1, 123)，(3, 122)，然后各自将投票发送给集群中所有机器。接收来自各个服务器的投票。与启动时过程相同。
(3)处理投票。与启动时过程相同，此时，Server1将会成为Leader。
(4)统计投票。与启动时过程相同。
(5)改变服务器的状态。与启动时过程相同


四、作业：使用zkclient这个zookeeper客户端，实现分布式锁！  这个锁需要实现Lock接口！
https://github.com/haotingfang/springboot-start-demo


五、watcher为什么只实现一次监听，如何实现持久监听
其一、如果watcher实现持久监听，zk服务端需要存储所有监听节点事件，会造成服务器端压力；其二、如果watcher实现持久监听，触发订阅方必须显式取消，那么触发一次的场景若要实现，就要显示的调用取消。两种实际使用场景而言，实现一次监听，将持久监听的权限交给客户端，更加的合适

持久监听Demo
https://github.com/haotingfang/springboot-start-demo

六、分析watcher的实现原理
参考链接：
总结分析
https://www.zhihu.com/zvideo/1371575356030259200
结合源码分析
https://blog.csdn.net/sdaujsj1/article/details/106456303?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163091536116780265464333%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163091536116780265464333&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-1-106456303.pc_v2_rank_blog_default&utm_term=watcher&spm=1018.2226.3001.4450
https://blog.csdn.net/sdaujsj1/article/details/106459085?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163091536116780265464333%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163091536116780265464333&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-2-106459085.pc_v2_rank_blog_default&utm_term=watcher&spm=1018.2226.3001.4450
https://blog.csdn.net/sdaujsj1/article/details/106461503?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163091536116780265464333%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&request_id=163091536116780265464333&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~first_rank_v2~rank_v29-3-106461503.pc_v2_rank_blog_default&utm_term=watcher&spm=1018.2226.3001.4450

ZooKeeper 的 Watcher 机制，总的来说可以分为三个过程：
1．客户端注册 Watcher、
2．服务器处理 Watcher
3．客户端回调 Watcher
客户端注册 watcher 有 3 种方式，getData、exists、getChildren


七、zookeeper学完了，基于公司现有的项目和功能，能够使用zookeeper解决具体的问题呢？配置中心？leader选举？ 可以尝试思考一下，并且想想这个方案如何落实。
